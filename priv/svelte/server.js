var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// js/server.js
var server_exports = {};
__export(server_exports, {
  render: () => render
});
module.exports = __toCommonJS(server_exports);

// import-glob:../svelte/**/*.svelte
var __exports = {};
__export(__exports, {
  default: () => __default,
  filenames: () => filenames
});
var modules = [];
var __default = modules;
var filenames = [];

// ../deps/live_svelte/priv/static/live_svelte.esm.js
function normalizeComponents(components) {
  if (!Array.isArray(components.default) || !Array.isArray(components.filenames))
    return components;
  const normalized = {};
  for (const [index, module2] of components.default.entries()) {
    const Component = module2.default;
    const name = components.filenames[index].replace("../svelte/", "").replace(".svelte", "");
    normalized[name] = Component;
  }
  return normalized;
}
function getRender(components) {
  components = normalizeComponents(components);
  return function render2(name, props, slots) {
    const Component = components[name];
    const $$slots = Object.fromEntries(Object.entries(slots).map(([k, v]) => [k, () => v]));
    return Component.render(props, { $$slots });
  };
}

// js/server.js
var render = getRender(__exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  render
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vYXNzZXRzL2pzL3NlcnZlci5qcyIsICJpbXBvcnQtZ2xvYjouLi9zdmVsdGUvKiovKi5zdmVsdGUiLCAiLi4vLi4vZGVwcy9saXZlX3N2ZWx0ZS9hc3NldHMvanMvbGl2ZV9zdmVsdGUvdXRpbHMuanMiLCAiLi4vLi4vZGVwcy9saXZlX3N2ZWx0ZS9hc3NldHMvanMvbGl2ZV9zdmVsdGUvcmVuZGVyLmpzIiwgIi4uLy4uL2RlcHMvbGl2ZV9zdmVsdGUvYXNzZXRzL2pzL2xpdmVfc3ZlbHRlL2hvb2tzLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgKiBhcyBDb21wb25lbnRzIGZyb20gXCIuLi9zdmVsdGUvKiovKi5zdmVsdGVcIlxuaW1wb3J0IHtnZXRSZW5kZXJ9IGZyb20gXCJsaXZlX3N2ZWx0ZVwiXG5cbmV4cG9ydCBjb25zdCByZW5kZXIgPSBnZXRSZW5kZXIoQ29tcG9uZW50cylcbiIsICJcbiAgICAgICAgXG5cbiAgICAgICAgY29uc3QgbW9kdWxlcyA9IFtdO1xuXG4gICAgICAgIGV4cG9ydCBkZWZhdWx0IG1vZHVsZXM7XG4gICAgICAgIGV4cG9ydCBjb25zdCBmaWxlbmFtZXMgPSBbXVxuICAgICAgIiwgImV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnRzKGNvbXBvbmVudHMpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoY29tcG9uZW50cy5kZWZhdWx0KSB8fCAhQXJyYXkuaXNBcnJheShjb21wb25lbnRzLmZpbGVuYW1lcykpIHJldHVybiBjb21wb25lbnRzXG5cbiAgICBjb25zdCBub3JtYWxpemVkID0ge31cbiAgICBmb3IgKGNvbnN0IFtpbmRleCwgbW9kdWxlXSBvZiBjb21wb25lbnRzLmRlZmF1bHQuZW50cmllcygpKSB7XG4gICAgICAgIGNvbnN0IENvbXBvbmVudCA9IG1vZHVsZS5kZWZhdWx0XG4gICAgICAgIGNvbnN0IG5hbWUgPSBjb21wb25lbnRzLmZpbGVuYW1lc1tpbmRleF0ucmVwbGFjZShcIi4uL3N2ZWx0ZS9cIiwgXCJcIikucmVwbGFjZShcIi5zdmVsdGVcIiwgXCJcIilcbiAgICAgICAgbm9ybWFsaXplZFtuYW1lXSA9IENvbXBvbmVudFxuICAgIH1cbiAgICByZXR1cm4gbm9ybWFsaXplZFxufVxuIiwgImltcG9ydCB7bm9ybWFsaXplQ29tcG9uZW50c30gZnJvbSBcIi4vdXRpbHNcIlxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVuZGVyKGNvbXBvbmVudHMpIHtcbiAgICBjb21wb25lbnRzID0gbm9ybWFsaXplQ29tcG9uZW50cyhjb21wb25lbnRzKVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHJlbmRlcihuYW1lLCBwcm9wcywgc2xvdHMpIHtcbiAgICAgICAgY29uc3QgQ29tcG9uZW50ID0gY29tcG9uZW50c1tuYW1lXVxuICAgICAgICBjb25zdCAkJHNsb3RzID0gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKHNsb3RzKS5tYXAoKFtrLCB2XSkgPT4gW2ssICgpID0+IHZdKSlcbiAgICAgICAgcmV0dXJuIENvbXBvbmVudC5yZW5kZXIocHJvcHMsIHskJHNsb3RzfSlcbiAgICB9XG59XG4iLCAiaW1wb3J0IHtub3JtYWxpemVDb21wb25lbnRzfSBmcm9tIFwiLi91dGlsc1wiXG5cbmZ1bmN0aW9uIGdldEF0dHJpYnV0ZUpzb24ocmVmLCBhdHRyaWJ1dGVOYW1lKSB7XG4gICAgY29uc3QgZGF0YSA9IHJlZi5lbC5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSlcbiAgICByZXR1cm4gZGF0YSA/IEpTT04ucGFyc2UoZGF0YSkgOiB7fVxufVxuXG5mdW5jdGlvbiBkZXRhY2gobm9kZSkge1xuICAgIG5vZGUucGFyZW50Tm9kZT8ucmVtb3ZlQ2hpbGQobm9kZSlcbn1cblxuZnVuY3Rpb24gaW5zZXJ0KHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG4gICAgdGFyZ2V0Lmluc2VydEJlZm9yZShub2RlLCBhbmNob3IgfHwgbnVsbClcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIGdldFNsb3RzKHJlZikge1xuICAgIGNvbnN0IHNsb3RzID0ge31cblxuICAgIGZvciAoY29uc3Qgc2xvdE5hbWUgaW4gZ2V0QXR0cmlidXRlSnNvbihyZWYsIFwiZGF0YS1zbG90c1wiKSkge1xuICAgICAgICBjb25zdCBzbG90ID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBnZXRFbGVtZW50KCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBiYXNlNjQgPSBnZXRBdHRyaWJ1dGVKc29uKHJlZiwgXCJkYXRhLXNsb3RzXCIpW3Nsb3ROYW1lXVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IGF0b2IoYmFzZTY0KS50cmltKClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGV0YWNoKHRoaXMuc2F2ZWRFbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVkRWxlbWVudCA9IHRoaXMuZ2V0RWxlbWVudCgpXG4gICAgICAgICAgICAgICAgICAgIGluc2VydCh0aGlzLnNhdmVkVGFyZ2V0LCB0aGlzLnNhdmVkRWxlbWVudCwgdGhpcy5zYXZlZEFuY2hvcilcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGM6IG5vb3AsXG4gICAgICAgICAgICAgICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVkVGFyZ2V0ID0gdGFyZ2V0XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZWRBbmNob3IgPSBhbmNob3JcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlZEVsZW1lbnQgPSB0aGlzLmdldEVsZW1lbnQoKVxuICAgICAgICAgICAgICAgICAgICBpbnNlcnQodGhpcy5zYXZlZFRhcmdldCwgdGhpcy5zYXZlZEVsZW1lbnQsIHRoaXMuc2F2ZWRBbmNob3IpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkKGRldGFjaGluZykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGV0YWNoaW5nKSBkZXRhY2godGhpcy5zYXZlZEVsZW1lbnQpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsOiBub29wLFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc2xvdHNbc2xvdE5hbWVdID0gW3Nsb3RdXG4gICAgfVxuXG4gICAgcmV0dXJuIHNsb3RzXG59XG5cbmZ1bmN0aW9uIGdldExpdmVKc29uUHJvcHMocmVmKSB7XG4gICAgY29uc3QganNvbiA9IGdldEF0dHJpYnV0ZUpzb24ocmVmLCBcImRhdGEtbGl2ZS1qc29uXCIpXG5cbiAgICAvLyBPbiBTU1IsIGRhdGEtbGl2ZS1qc29uIGlzIHRoZSBmdWxsIG9iamVjdCB3ZSB3YW50XG4gICAgLy8gQWZ0ZXIgU1NSLCBkYXRhLWxpdmUtanNvbiBpcyBhbiBhcnJheSBvZiBrZXlzLCBhbmQgd2UnbGwgZ2V0IHRoZSBkYXRhIGZyb20gdGhlIHdpbmRvd1xuICAgIGlmICghQXJyYXkuaXNBcnJheShqc29uKSkgcmV0dXJuIGpzb25cblxuICAgIGNvbnN0IGxpdmVKc29uRGF0YSA9IHt9XG4gICAgZm9yIChjb25zdCBsaXZlSnNvblZhcmlhYmxlIG9mIGpzb24pIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHdpbmRvd1tsaXZlSnNvblZhcmlhYmxlXVxuICAgICAgICBpZiAoZGF0YSkgbGl2ZUpzb25EYXRhW2xpdmVKc29uVmFyaWFibGVdID0gZGF0YVxuICAgIH1cbiAgICByZXR1cm4gbGl2ZUpzb25EYXRhXG59XG5cbmZ1bmN0aW9uIGdldFByb3BzKHJlZikge1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLmdldEF0dHJpYnV0ZUpzb24ocmVmLCBcImRhdGEtcHJvcHNcIiksXG4gICAgICAgIC4uLmdldExpdmVKc29uUHJvcHMocmVmKSxcbiAgICAgICAgbGl2ZTogcmVmLFxuICAgICAgICAkJHNsb3RzOiBnZXRTbG90cyhyZWYpLFxuICAgICAgICAkJHNjb3BlOiB7fSxcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRTbG90Q3R4KGNvbXBvbmVudCkge1xuICAgIC8vIFRoZSBkZWZhdWx0IHNsb3QgYWx3YXlzIGV4aXN0cyBpZiB0aGVyZSdzIGEgc2xvdCBzZXRcbiAgICAvLyBldmVuIGlmIG5vIHNsb3QgaXMgc2V0IGZvciB0aGUgZXhwbGljaXQgZGVmYXVsdCBzbG90XG4gICAgcmV0dXJuIGNvbXBvbmVudC4kJC5jdHguZmluZChjdHhFbGVtZW50ID0+IGN0eEVsZW1lbnQ/LmRlZmF1bHQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRIb29rcyhjb21wb25lbnRzKSB7XG4gICAgY29tcG9uZW50cyA9IG5vcm1hbGl6ZUNvbXBvbmVudHMoY29tcG9uZW50cylcblxuICAgIGNvbnN0IFN2ZWx0ZUhvb2sgPSB7XG4gICAgICAgIG1vdW50ZWQoKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnROYW1lID0gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW5hbWVcIilcbiAgICAgICAgICAgIGlmICghY29tcG9uZW50TmFtZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbXBvbmVudCBuYW1lIG11c3QgYmUgcHJvdmlkZWRcIilcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgQ29tcG9uZW50ID0gY29tcG9uZW50c1tjb21wb25lbnROYW1lXVxuICAgICAgICAgICAgaWYgKCFDb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBmaW5kICR7Y29tcG9uZW50TmFtZX0gY29tcG9uZW50LmApXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgbGl2ZUpzb25FbGVtZW50IG9mIE9iamVjdC5rZXlzKGdldEF0dHJpYnV0ZUpzb24odGhpcywgXCJkYXRhLWxpdmUtanNvblwiKSkpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihgJHtsaXZlSnNvbkVsZW1lbnR9X2luaXRpYWxpemVkYCwgZXZlbnQgPT4gdGhpcy5faW5zdGFuY2UuJHNldChnZXRQcm9wcyh0aGlzKSksIGZhbHNlKVxuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGAke2xpdmVKc29uRWxlbWVudH1fcGF0Y2hlZGAsIGV2ZW50ID0+IHRoaXMuX2luc3RhbmNlLiRzZXQoZ2V0UHJvcHModGhpcykpLCBmYWxzZSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgQ29tcG9uZW50KHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHRoaXMuZWwsXG4gICAgICAgICAgICAgICAgcHJvcHM6IGdldFByb3BzKHRoaXMpLFxuICAgICAgICAgICAgICAgIGh5ZHJhdGU6IHRoaXMuZWwuaGFzQXR0cmlidXRlKFwiZGF0YS1zc3JcIiksXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZWQoKSB7XG4gICAgICAgICAgICAvLyBTZXQgdGhlIHByb3BzXG4gICAgICAgICAgICB0aGlzLl9pbnN0YW5jZS4kc2V0KGdldFByb3BzKHRoaXMpKVxuXG4gICAgICAgICAgICAvLyBTZXQgdGhlIHNsb3RzXG4gICAgICAgICAgICBjb25zdCBzbG90Q3R4ID0gZmluZFNsb3RDdHgodGhpcy5faW5zdGFuY2UpXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzbG90Q3R4KSB7XG4gICAgICAgICAgICAgICAgc2xvdEN0eFtrZXldWzBdKCkudXBkYXRlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBkZXN0cm95ZWQoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBoeDpwYWdlLWxvYWRpbmctc3RvcFwiLCAoKSA9PiB0aGlzLl9pbnN0YW5jZS4kZGVzdHJveSgpLCB7b25jZTogdHJ1ZX0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgU3ZlbHRlSG9vayxcbiAgICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7O0FDQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUdRLElBQU0sVUFBVSxDQUFDO0FBRWpCLElBQU8sWUFBUTtBQUNSLElBQU0sWUFBWSxDQUFDOzs7QUNOM0IsU0FBUyxvQkFBb0IsWUFBWTtBQUM1QyxNQUFJLENBQUMsTUFBTSxRQUFRLFdBQVcsT0FBTyxLQUFLLENBQUMsTUFBTSxRQUFRLFdBQVcsU0FBUztBQUFHLFdBQU87QUFFdkYsUUFBTSxhQUFhLENBQUM7QUFDcEIsYUFBVyxDQUFDLE9BQU9BLE9BQU0sS0FBSyxXQUFXLFFBQVEsUUFBUSxHQUFHO0FBQ3hELFVBQU0sWUFBWUEsUUFBTztBQUN6QixVQUFNLE9BQU8sV0FBVyxVQUFVLEtBQUssRUFBRSxRQUFRLGNBQWMsRUFBRSxFQUFFLFFBQVEsV0FBVyxFQUFFO0FBQ3hGLGVBQVcsSUFBSSxJQUFJO0VBQ3ZCO0FBQ0EsU0FBTztBQUNYO0FDUk8sU0FBUyxVQUFVLFlBQVk7QUFDbEMsZUFBYSxvQkFBb0IsVUFBVTtBQUUzQyxTQUFPLFNBQVNDLFFBQU8sTUFBTSxPQUFPLE9BQU87QUFDdkMsVUFBTSxZQUFZLFdBQVcsSUFBSTtBQUNqQyxVQUFNLFVBQVUsT0FBTyxZQUFZLE9BQU8sUUFBUSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDdEYsV0FBTyxVQUFVLE9BQU8sT0FBTyxFQUFDLFFBQU8sQ0FBQztFQUM1QztBQUNKOzs7QUhQTyxJQUFNLFNBQVMsVUFBVSxTQUFVOyIsCiAgIm5hbWVzIjogWyJtb2R1bGUiLCAicmVuZGVyIl0KfQo=
